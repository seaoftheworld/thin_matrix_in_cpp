#include "Core/Common/data.h"
#include "Core/Common/gl_header.h"

#include "WindowSystem/WindowSystem.h"

#define WATER_TILE_VERTICE_STRIDE (2)  // to be used for the SingleAttributeModel-object of water
#define WATER_TILE_TRIANGLES_NUM  (2)  // to be used for the SingleAttributeModel-object of water

#define WATER_TILE_FBO_WIDTH  (200)
#define WATER_TILE_FBO_HEIGHT (200)

class WaterTileFBO {
    int     fboID = -1, 
        textureID = -1;

    void init() {
        glGenFramebuffers(1, (GLuint *)&fboID);
        glBindFramebuffer(GL_FRAMEBUFFER, fboID);
            glDrawBuffer(GL_COLOR_ATTACHMENT0); //indicates render to color attachment 0 when bound
            {
                glGenTextures(1, (GLuint *)&textureID);
                glBindTexture(GL_TEXTURE_2D, textureID);

                glTexImage2D(GL_TEXTURE_2D, 0, GL_RGB, WATER_TILE_FBO_WIDTH, WATER_TILE_FBO_HEIGHT, 0, GL_RGB, GL_UNSIGNED_BYTE, NULL);
                glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR);
                glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR);

                glFramebufferTexture(GL_FRAMEBUFFER, GL_COLOR_ATTACHMENT0, textureID, 0);
            }

        glBindFramebuffer(GL_FRAMEBUFFER, 0);
    }

public:
    WaterTileFBO() {
        init();
    }
    ~WaterTileFBO() {
        glDeleteTextures(1, (GLuint *)&textureID);
        glDeleteFramebuffers(1, (GLuint *)&fboID);
    }

public:
    int getTexture() {
        return textureID;
    }

public:
    void bind() {
        glBindTexture(GL_TEXTURE_2D, 0);
        glBindFramebuffer(GL_FRAMEBUFFER, fboID);
        glViewport(0, 0, WATER_TILE_FBO_WIDTH, WATER_TILE_FBO_HEIGHT);
    }
    void unbind() {
        glBindFramebuffer(GL_FRAMEBUFFER, 0);
        glViewport(0, 0, WIN_WIDTH, WIN_HEIGHT);
    }
};

class WaterTile {
private:
    // x,y values passed into the water-shader are fixed normalized-values from -1 to 1
    // for the 4 vertices of a rectangular (uv calculation based on this accordingly),
    // z value in glsl-shader is set to be fixed '0'
    //
    // The transform of a water-tile is from the model-matrix (model of MVP)
    // generated by the values below:
    float transform[3] = {0.0f, 0.0f, 0.0f};

    WaterTileFBO fbo;

    // TODO: rename to be translate and support size either

public:
    static const float SIZE;

    // The model for a water-tile (and all water-tiles). This requires the a loader-object 
    // to allocate a model correctly, then assign value for this pointer,
    // as in LoadTargets_03::initWaterTile()
    static SingleAttributeModel *rect;

public:
    void init(float input_data[][3]) {
        if (input_data) {
            transform[0] = (*input_data)[0];
            transform[1] = (*input_data)[1];
            transform[2] = (*input_data)[2];
        }
    }

    float (*getTransform())[3] {
        return &transform;
    }

    float getHeight() {
        return transform[2];
    }

    WaterTileFBO *getFbo() {
        return &fbo;
    }
};
